ConstantBuffer RenderObjectData
{
	column_major matrix modelMatrix;
};

ConstantBuffer CameraData
{
	column_major matrix camMatrix;
};

ConstantBuffer CameraPositionData
{
	float3 cameraPos;
};


ConstantBuffer Colour{
	float4 objColour;
}

struct VS_INPUT
{
	float3 Position		: POSITION0;
	float2 UV			: TEXCOORD0;
	float3 Normal		: TEXCOORD1;
	float4 Tangent		: TEXCOORD2;
};

struct VS_OUTPUT
{
	float4 Position		: S_POSITION;
	float2 UV			: TEXCOORD0;
	float4 Colour		: TEXCOORD1;
	float3 cameraPos: TEXCOORD2;
	float3 normal       : NORMAL0;
	float3 tangent      : TANGENT0;
	float3 binormal     : BINORMAL0;
	float3 WorldPosition : WPOS0;
};

VS_OUTPUT main(VS_INPUT Input)
{
	VS_OUTPUT Output;
	
	Output.Colour = objColour;
	Output.UV = Input.UV;

	column_major float3x3 tempMatrix= float3x3(modelMatrix);
	//tempMatrix = inverse();
	column_major float3x3 normalMatrix = tempMatrix;

	float3 worldNormal  = normalize(mul(normalMatrix, normalize(Input.Normal)));
	float3 worldTangent = normalize(mul(normalMatrix, normalize(Input.Tangent.xyz)));

	Output.normal = worldNormal;
	Output.tangent = worldTangent;
	Output.binormal = cross(worldTangent, worldNormal) * Input.Tangent.w;
//
	Output.cameraPos = cameraPos;
//
	float4 worldPos = mul(modelMatrix, float4(Input.Position.xyz, 1.0f));

	Output.WorldPosition = worldPos.xyz;
	Output.Position = mul(camMatrix, worldPos);

	return Output;
}
